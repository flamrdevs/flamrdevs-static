---
import propsplit from "propsplit";

import { ClassesKeys, classex } from "./../../classes";
import type * as Polymorphic from "./../../polymorphic";

import * as reklass from "./../.reklass";

import * as ContainerKlass from "./Container.klass";

type Props<As extends Polymorphic.As = "div"> = Polymorphic.Props<As, ContainerKlass.Variants & reklass.MarginVariants & reklass.PaddingVariants>;

const { as: As = "div", ...props } = Astro.props;

const [classes, recipe, margin, padding, attrs] = propsplit(props, ClassesKeys, ContainerKlass.Root.vk, reklass.Margin.rvk, reklass.Padding.rvk);

const className = classex([ContainerKlass.Root(recipe), reklass.Margin(margin), reklass.Padding(padding)], classes);
---

<As {...attrs as any} class={className}>
	<slot />
</As>
