---
import propsplit from "propsplit";

import { ClassesKeys, classex } from "./../../classes";
import type * as Polymorphic from "./../../polymorphic";

import { getButtonAttrs } from "./../attributes/button";
import type { ButtonOptions } from "./../attributes/button";

import * as IconButtonKlass from "./IconButton.klass";

type Props<As extends Polymorphic.As = "button"> = Polymorphic.Props<
	As,
	ButtonOptions & IconButtonKlass.Variants & IconButtonKlass.InnerVariants & IconButtonKlass.ChildVariants
>;

const { as: As = "button", ...props } = Astro.props;

const [classes, options, klass, attrs] = propsplit(props, ClassesKeys, ["disabled"], IconButtonKlass.Root.vk);

const className = classex(IconButtonKlass.Root({ color: klass.color, size: klass.size }), classes);
const innerClassName = IconButtonKlass.Inner({ color: klass.color });
const childClassName = IconButtonKlass.Child({ size: klass.size });
---

<As class={className} {...getButtonAttrs(As, options)} {...attrs as any}>
	<div class={innerClassName}>
		<div class={childClassName}>
			<slot />
		</div>
	</div>
</As>
